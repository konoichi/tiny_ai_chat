# abby_chatbot/chatbot/selftest.py
"""
Selftest-Modul f√ºr Abby Chatbot
Pr√ºft Basisfunktionen & Module

Dieses Modul implementiert eine einfache Selbsttest-Funktion, die grundlegende
Komponenten des Chatbot-Systems √ºberpr√ºft. Es wird verwendet, um sicherzustellen,
dass die Kernfunktionalit√§ten korrekt arbeiten, ohne dass ein vollst√§ndiger
Testlauf des gesamten Systems erforderlich ist.

Der Selftest √ºberpr√ºft:
- Die Funktionalit√§t des Memory-Moduls
- Die Funktionalit√§t des PromptBuilder-Moduls
- Die korrekte Interaktion zwischen diesen Komponenten
- Die Verf√ºgbarkeit und Lesbarkeit von Konfigurationsdateien
- Die Verf√ºgbarkeit von Modellen

Diese Tests sind bewusst einfach gehalten und dienen haupts√§chlich als schnelle
Diagnose f√ºr Benutzer, die Probleme mit dem System haben k√∂nnten.
"""
import os
import logging
import traceback
from colorama import Fore

# Logger f√ºr dieses Modul
logger = logging.getLogger("Selftest")
def selftest():
    """
    F√ºhrt einen umfassenden Selbsttest der Kernkomponenten des Chatbot-Systems durch.
    
    Diese Funktion √ºberpr√ºft die grundlegenden Funktionalit√§ten des Systems:
    1. Initialisierung und Verwendung des Memory-Moduls
    2. Initialisierung und Verwendung des PromptBuilder-Moduls
    3. Korrekte Formatierung der erzeugten Prompts
    4. Verf√ºgbarkeit und Lesbarkeit von Konfigurationsdateien
    5. Verf√ºgbarkeit von Modellverzeichnissen
    
    Die Funktion gibt detaillierte Statusmeldungen auf der Konsole aus und
    protokolliert Fehler f√ºr die sp√§tere Diagnose.
    
    Returns:
        None: Die Funktion gibt keinen Wert zur√ºck, sondern druckt Statusmeldungen
    """
    print(Fore.YELLOW + "--- NavyYard Selftest ---")
    
    # Sammle Testergebnisse
    results = {
        "memory": {"status": "nicht getestet", "details": ""},
        "prompter": {"status": "nicht getestet", "details": ""},
        "config": {"status": "nicht getestet", "details": ""},
        "models": {"status": "nicht getestet", "details": ""},
        "yaml_personas": {"status": "nicht getestet", "details": ""}
    }
    
    try:
        # Test 1: Memory-Modul
        print(Fore.CYAN + "üß† Teste Memory-Modul...")
        try:
            from .memory import Memory
            mem = Memory()
            mem.add_entry("Hallo?", "Na endlich!")
            assert len(mem.get_recent()) == 1, "Memory sollte einen Eintrag enthalten"
            mem.clear()
            assert len(mem.get_recent()) == 0, "Memory sollte leer sein nach clear()"
            results["memory"] = {"status": "ok", "details": "Alle Tests bestanden"}
            print(Fore.GREEN + "  ‚úÖ Memory-Modul funktioniert korrekt")
        except ImportError as e:
            results["memory"] = {"status": "fehler", "details": f"Import-Fehler: {e}"}
            print(Fore.RED + f"  ‚ùå Memory-Modul konnte nicht importiert werden: {e}")
            logger.error(f"Memory-Modul Import-Fehler: {e}")
        except Exception as e:
            results["memory"] = {"status": "fehler", "details": str(e)}
            print(Fore.RED + f"  ‚ùå Memory-Test fehlgeschlagen: {e}")
            logger.error(f"Memory-Test fehlgeschlagen: {e}", exc_info=True)

        # Test 2: PromptBuilder-Modul
        print(Fore.CYAN + "üìù Teste PromptBuilder-Modul...")
        try:
            from .prompter import PromptBuilder
            pb = PromptBuilder("Test-Persona")
            # Teste mit leerem Verlauf
            prompt_empty = pb.build([], "Test-Eingabe")
            assert isinstance(prompt_empty, list), "Prompt sollte eine Liste sein"
            assert len(prompt_empty) >= 2, "Prompt sollte mindestens System- und User-Nachricht enthalten"
            assert prompt_empty[0]["role"] == "system", "Erste Nachricht sollte System-Rolle haben"
            assert prompt_empty[-1]["content"] == "Test-Eingabe", "Letzte Nachricht sollte die Benutzereingabe sein"
            
            # Teste mit Verlauf
            test_history = [("Frage 1", "Antwort 1"), ("Frage 2", "Antwort 2")]
            prompt_history = pb.build(test_history, "Frage 3")
            assert len(prompt_history) == 6, "Prompt sollte 6 Nachrichten enthalten (1 System + 4 Verlauf + 1 Aktuell)"
            
            results["prompter"] = {"status": "ok", "details": "Alle Tests bestanden"}
            print(Fore.GREEN + "  ‚úÖ PromptBuilder-Modul funktioniert korrekt")
        except ImportError as e:
            results["prompter"] = {"status": "fehler", "details": f"Import-Fehler: {e}"}
            print(Fore.RED + f"  ‚ùå PromptBuilder-Modul konnte nicht importiert werden: {e}")
            logger.error(f"PromptBuilder-Modul Import-Fehler: {e}")
        except Exception as e:
            results["prompter"] = {"status": "fehler", "details": str(e)}
            print(Fore.RED + f"  ‚ùå PromptBuilder-Test fehlgeschlagen: {e}")
            logger.error(f"PromptBuilder-Test fehlgeschlagen: {e}", exc_info=True)

        # Test 3: Konfigurationsdateien
        print(Fore.CYAN + "‚öôÔ∏è Teste Konfigurationsdateien...")
        try:
            config_path = "config/settings.yaml"
            if not os.path.exists(config_path):
                raise FileNotFoundError(f"Konfigurationsdatei nicht gefunden: {config_path}")
                
            # Teste Persona-Dateien
            persona_files = [f for f in os.listdir("config") if f.endswith(".txt")]
            if not persona_files:
                print(Fore.YELLOW + "  ‚ö†Ô∏è Keine Persona-Dateien gefunden")
            else:
                print(Fore.GREEN + f"  ‚úÖ {len(persona_files)} Persona-Dateien gefunden")
                
            results["config"] = {"status": "ok", "details": f"{len(persona_files)} Persona-Dateien gefunden"}
            print(Fore.GREEN + "  ‚úÖ Konfigurationsdateien sind verf√ºgbar")
        except Exception as e:
            results["config"] = {"status": "fehler", "details": str(e)}
            print(Fore.RED + f"  ‚ùå Konfigurationstest fehlgeschlagen: {e}")
            logger.error(f"Konfigurationstest fehlgeschlagen: {e}", exc_info=True)

        # Test 4: Modellverzeichnis
        print(Fore.CYAN + "üß† Teste Modellverf√ºgbarkeit...")
        try:
            models_dir = "models"
            if not os.path.exists(models_dir) or not os.path.isdir(models_dir):
                print(Fore.YELLOW + f"  ‚ö†Ô∏è Modellverzeichnis nicht gefunden: {models_dir}")
                results["models"] = {"status": "warnung", "details": "Modellverzeichnis nicht gefunden"}
            else:
                model_files = [f for f in os.listdir(models_dir) if f.endswith(".gguf")]
                if not model_files:
                    print(Fore.YELLOW + "  ‚ö†Ô∏è Keine GGUF-Modelle im Modellverzeichnis gefunden")
                    results["models"] = {"status": "warnung", "details": "Keine GGUF-Modelle gefunden"}
                else:
                    print(Fore.GREEN + f"  ‚úÖ {len(model_files)} GGUF-Modelle gefunden")
                    results["models"] = {"status": "ok", "details": f"{len(model_files)} Modelle verf√ºgbar"}
        except Exception as e:
            results["models"] = {"status": "fehler", "details": str(e)}
            print(Fore.RED + f"  ‚ùå Modelltest fehlgeschlagen: {e}")
            logger.error(f"Modelltest fehlgeschlagen: {e}", exc_info=True)
            
        # Test 5: YAML-Persona-System
        print(Fore.CYAN + "üë§ Teste YAML-Persona-System...")
        try:
            from .yaml_persona_manager import YAMLPersonaManager, YAMLPersona
            
            # Teste YAMLPersonaManager-Initialisierung
            yaml_manager = YAMLPersonaManager()
            
            # Pr√ºfe, ob das YAML-Personas-Verzeichnis existiert
            yaml_personas_dir = "config/personas"
            if not os.path.exists(yaml_personas_dir):
                print(Fore.YELLOW + f"  ‚ö†Ô∏è YAML-Personas-Verzeichnis nicht gefunden, wird erstellt: {yaml_personas_dir}")
                os.makedirs(yaml_personas_dir, exist_ok=True)
            
            # Pr√ºfe, ob YAML-Persona-Dateien existieren
            yaml_files = [f for f in os.listdir(yaml_personas_dir) if f.endswith(".yaml")]
            if not yaml_files:
                print(Fore.YELLOW + "  ‚ö†Ô∏è Keine YAML-Persona-Dateien gefunden")
                results["yaml_personas"] = {"status": "warnung", "details": "Keine YAML-Persona-Dateien gefunden"}
            else:
                print(Fore.GREEN + f"  ‚úÖ {len(yaml_files)} YAML-Persona-Dateien gefunden")
                
                # Teste das Laden einer YAML-Persona
                test_persona_name = yaml_files[0][:-5]  # Entferne .yaml
                yaml_persona = yaml_manager.load_yaml_persona(test_persona_name)
                
                if yaml_persona:
                    print(Fore.GREEN + f"  ‚úÖ YAML-Persona '{test_persona_name}' erfolgreich geladen")
                    
                    # Teste die Prompt-Generierung
                    full_prompt = yaml_persona.get_full_prompt()
                    assert full_prompt, "YAML-Persona sollte einen vollst√§ndigen Prompt generieren k√∂nnen"
                    
                    results["yaml_personas"] = {"status": "ok", "details": f"{len(yaml_files)} YAML-Personas verf√ºgbar"}
                else:
                    print(Fore.YELLOW + f"  ‚ö†Ô∏è Konnte YAML-Persona '{test_persona_name}' nicht laden")
                    results["yaml_personas"] = {"status": "warnung", "details": "Konnte YAML-Persona nicht laden"}
        except ImportError as e:
            results["yaml_personas"] = {"status": "fehler", "details": f"Import-Fehler: {e}"}
            print(Fore.RED + f"  ‚ùå YAML-Persona-Modul konnte nicht importiert werden: {e}")
            logger.error(f"YAML-Persona-Modul Import-Fehler: {e}")
        except Exception as e:
            results["yaml_personas"] = {"status": "fehler", "details": str(e)}
            print(Fore.RED + f"  ‚ùå YAML-Persona-Test fehlgeschlagen: {e}")
            logger.error(f"YAML-Persona-Test fehlgeschlagen: {e}", exc_info=True)

        # Zusammenfassung
        print(Fore.YELLOW + "\n--- Selftest-Zusammenfassung ---")
        all_ok = all(r["status"] == "ok" for r in results.values())
        if all_ok:
            print(Fore.GREEN + "‚úÖ Alle Tests erfolgreich bestanden. NavyYard ist bereit.")
        else:
            warnings = sum(1 for r in results.values() if r["status"] == "warnung")
            errors = sum(1 for r in results.values() if r["status"] == "fehler")
            if errors > 0:
                print(Fore.RED + f"‚ùå {errors} Fehler und {warnings} Warnungen gefunden.")
            else:
                print(Fore.YELLOW + f"‚ö†Ô∏è {warnings} Warnungen gefunden, aber keine kritischen Fehler.")
                print(Fore.GREEN + "‚úÖ NavyYard sollte funktionsf√§hig sein.")
                
    except Exception as e:
        print(Fore.RED + f"‚ùå Kritischer Fehler im Selftest: {e}")
        logger.critical(f"Kritischer Fehler im Selftest: {e}", exc_info=True)
        print(Fore.RED + traceback.format_exc())
